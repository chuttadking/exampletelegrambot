"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const body_1 = require("./body");
function mehToString(something) {
    if (typeof something === 'object' || !something) {
        return JSON.stringify(something);
    }
    return String(something);
}
// Fake JS user fails
const EXAMPLE_WRONGS = [
    undefined,
    null,
    true,
    false,
    {},
    '',
    () => 'whatever',
    42,
    {
        media: 'whatever'
    },
    {
        media: 'whatever',
        type: 'whatever'
    },
    {
        location: {
            latitude: 50
        }
    },
    {
        location: {
            latitude: 50,
            longitude: 10
        },
        text: 'Locations cant have text'
    },
    {
        venue: {
            location: {
                latitude: 50,
                longitude: 10
            },
            title: 'A',
            address: 'B'
        },
        text: 'Venue cant have text'
    },
    {
        venue: {
            location: {
                latitude: 50,
                longitude: 10
            },
            title: 'Venue needs address'
        }
    },
    {
        venue: {
            location: {
                latitude: 50,
                longitude: 10
            },
            address: 'Venue needs title'
        }
    },
    {
        venue: {
            location: {
                latitude: 50
            },
            title: 'Venue needs valid location',
            address: 'B'
        }
    }
];
const EXAMPLE_TEXTS = [
    'Hello World',
    {
        text: 'Hello World'
    },
    {
        text: 'Hello World',
        parse_mode: 'Markdown'
    },
    {
        text: 'Hello World',
        disable_web_page_preview: true
    }
];
const EXAMPLE_MEDIA = [
    {
        media: 'whatever',
        type: 'photo'
    },
    {
        media: 'whatever',
        type: 'photo',
        text: 'whatever'
    },
    {
        media: 'whatever',
        type: 'photo',
        text: 'whatever',
        parse_mode: 'Markdown'
    }
];
const EXAMPLE_LOCATION = [
    {
        location: {
            latitude: 50,
            longitude: 10
        }
    },
    {
        location: {
            latitude: 50,
            longitude: 10
        },
        live_period: 600
    }
];
const EXAMPLE_VENUE = {
    venue: {
        location: {
            latitude: 50,
            longitude: 10
        },
        title: 'A',
        address: 'B'
    }
};
function isTextBodyMacro(t, expected, maybeBody) {
    t.is(body_1.isTextBody(maybeBody), expected);
}
isTextBodyMacro.title = (_title, expected, maybeBody) => {
    return `isTextBody ${String(expected)} ${mehToString(maybeBody)}`;
};
for (const body of EXAMPLE_TEXTS) {
    ava_1.default(isTextBodyMacro, true, body);
}
for (const body of [...EXAMPLE_MEDIA, ...EXAMPLE_LOCATION, EXAMPLE_VENUE, ...EXAMPLE_WRONGS]) {
    ava_1.default(isTextBodyMacro, false, body);
}
function isMediaBodyMacro(t, expected, maybeBody) {
    t.is(body_1.isMediaBody(maybeBody), expected);
}
isMediaBodyMacro.title = (_title, expected, maybeBody) => {
    return `isMediaBody ${String(expected)} ${mehToString(maybeBody)}`;
};
for (const body of EXAMPLE_MEDIA) {
    ava_1.default(isMediaBodyMacro, true, body);
}
for (const body of [...EXAMPLE_TEXTS, ...EXAMPLE_LOCATION, EXAMPLE_VENUE, ...EXAMPLE_WRONGS]) {
    ava_1.default(isMediaBodyMacro, false, body);
}
function isLocationBodyMacro(t, expected, maybeBody) {
    t.is(body_1.isLocationBody(maybeBody), expected);
}
isLocationBodyMacro.title = (_title, expected, maybeBody) => {
    return `isLocationBody ${String(expected)} ${mehToString(maybeBody)}`;
};
for (const body of EXAMPLE_LOCATION) {
    ava_1.default(isLocationBodyMacro, true, body);
}
for (const body of [...EXAMPLE_TEXTS, ...EXAMPLE_MEDIA, EXAMPLE_VENUE, ...EXAMPLE_WRONGS]) {
    ava_1.default(isLocationBodyMacro, false, body);
}
function isVenueBodyMacro(t, expected, maybeBody) {
    t.is(body_1.isVenueBody(maybeBody), expected);
}
isVenueBodyMacro.title = (_title, expected, maybeBody) => {
    return `isVenueBody ${String(expected)} ${mehToString(maybeBody)}`;
};
for (const body of [EXAMPLE_VENUE]) {
    ava_1.default(isVenueBodyMacro, true, body);
}
for (const body of [...EXAMPLE_TEXTS, ...EXAMPLE_MEDIA, ...EXAMPLE_LOCATION, ...EXAMPLE_WRONGS]) {
    ava_1.default(isVenueBodyMacro, false, body);
}
ava_1.default('getBodyText string', t => {
    const body = 'foo';
    t.is(body_1.getBodyText(body), 'foo');
});
ava_1.default('getBodyText TextBody', t => {
    const body = {
        text: 'foo'
    };
    t.is(body_1.getBodyText(body), 'foo');
});
//# sourceMappingURL=body.test.js.map