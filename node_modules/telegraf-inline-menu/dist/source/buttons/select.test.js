"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const select_1 = require("./select");
ava_1.default('empty choices no buttons', async (t) => {
    const func = select_1.generateSelectButtons('pre', [], {
        isSet: () => false,
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, []);
});
ava_1.default('is set creates false button', async (t) => {
    const func = select_1.generateSelectButtons('pre', ['a'], {
        isSet: () => true,
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: '✅ a',
                relativePath: 'preF:a'
            }]]);
});
ava_1.default('is not set creates true button', async (t) => {
    const func = select_1.generateSelectButtons('pre', ['a'], {
        isSet: () => false,
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: 'a',
                relativePath: 'preT:a'
            }]]);
});
ava_1.default('showFalseEmoji also prefixes currently false buttons', async (t) => {
    const func = select_1.generateSelectButtons('pre', ['a'], {
        showFalseEmoji: true,
        isSet: () => false,
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: '🚫 a',
                relativePath: 'preT:a'
            }]]);
});
ava_1.default('creates pagination buttons', async (t) => {
    const func = select_1.generateSelectButtons('pre', ['a', 'b', 'c'], {
        columns: 1,
        maxRows: 1,
        isSet: () => false,
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        },
        setPage: () => {
            throw new Error('no need to call setPage on keyboard creation');
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [
        [{
                text: 'a',
                relativePath: 'preT:a'
            }],
        [{
                text: '1',
                relativePath: 'preP:1'
            }, {
                text: '▶️ 2',
                relativePath: 'preP:2'
            }, {
                text: '⏩ 3',
                relativePath: 'preP:3'
            }]
    ]);
});
ava_1.default('show keys of page 2', async (t) => {
    const func = select_1.generateSelectButtons('pre', ['a', 'b', 'c'], {
        columns: 1,
        maxRows: 1,
        getCurrentPage: () => 2,
        isSet: () => false,
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: 'b',
                relativePath: 'preT:b'
            }]]);
});
ava_1.default('choice function is run', async (t) => {
    t.plan(4);
    const choiceFunction = (context) => {
        t.pass();
        return [context];
    };
    const func = select_1.generateSelectButtons('pre', choiceFunction, {
        isSet: () => false,
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        }
    });
    t.deepEqual(await func('a', '/'), [[{
                text: 'a',
                relativePath: 'preT:a'
            }]]);
    t.deepEqual(await func('b', '/'), [[{
                text: 'b',
                relativePath: 'preT:b'
            }]]);
});
ava_1.default('hidden does not render any buttons', async (t) => {
    const choiceFunction = () => {
        throw new Error('hidden -> dont call choices');
    };
    const func = select_1.generateSelectButtons('pre', choiceFunction, {
        hide: () => true,
        isSet: () => {
            throw new Error('dont call as its hidden');
        },
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, []);
});
ava_1.default('format state', async (t) => {
    const func = select_1.generateSelectButtons('pre', ['a'], {
        isSet: () => true,
        set: () => {
            throw new Error('no need to call set on keyboard creation');
        },
        formatState: (_context, textResult, state, key) => {
            t.is(textResult, 'a');
            t.is(state, true);
            t.is(key, 'a');
            return 'lalala';
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: 'lalala',
                relativePath: 'preF:a'
            }]]);
});
//# sourceMappingURL=select.test.js.map