"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const toggle_1 = require("./toggle");
ava_1.default('hidden does not render any button', async (t) => {
    const func = toggle_1.generateToggleButton('text', 'pre', {
        hide: () => true,
        isSet: () => {
            throw new Error('do not call as its hidden');
        },
        set: () => {
            throw new Error('do not call as its hidden');
        }
    });
    const button = await func(undefined, 'wow/');
    t.is(button, undefined);
});
ava_1.default('is true button', async (t) => {
    const func = toggle_1.generateToggleButton('text', 'pre', {
        isSet: () => true,
        set: () => {
            throw new Error('do not call as the button is not hit');
        }
    });
    const button = await func(undefined, 'wow/');
    t.deepEqual(button, {
        text: 'âœ… text',
        relativePath: 'pre:false'
    });
});
ava_1.default('is false button', async (t) => {
    const func = toggle_1.generateToggleButton('text', 'pre', {
        isSet: () => false,
        set: () => {
            throw new Error('do not call as the button is not hit');
        }
    });
    const button = await func(undefined, 'wow/');
    t.deepEqual(button, {
        text: 'ðŸš« text',
        relativePath: 'pre:true'
    });
});
ava_1.default('own format', async (t) => {
    const func = toggle_1.generateToggleButton('text', 'pre', {
        isSet: () => true,
        set: () => {
            throw new Error('do not call as the button is not hit');
        },
        formatState: (_context, text, state) => {
            t.is(text, 'text');
            t.is(state, true);
            return 'lalala';
        }
    });
    const button = await func(undefined, 'wow/');
    t.deepEqual(button, {
        text: 'lalala',
        relativePath: 'pre:false'
    });
});
ava_1.default('async text', async (t) => {
    const func = toggle_1.generateToggleButton(() => 'text', 'pre', {
        isSet: () => true,
        set: () => {
            throw new Error('do not call as the button is not hit');
        }
    });
    const button = await func(undefined, 'wow/');
    t.deepEqual(button, {
        text: 'âœ… text',
        relativePath: 'pre:false'
    });
});
//# sourceMappingURL=toggle.test.js.map