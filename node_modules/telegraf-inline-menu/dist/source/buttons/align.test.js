"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const align_1 = require("./align");
function generateCharArray(charA, charZ) {
    // https://stackoverflow.com/questions/24597634/how-to-generate-an-array-of-alphabet-in-jquery/24597663#24597663
    const a = [];
    let i = charA.charCodeAt(0);
    const j = charZ.charCodeAt(0);
    for (; i <= j; ++i) {
        a.push(String.fromCharCode(i));
    }
    return a;
}
ava_1.default('getRowsOfButtons example', t => {
    const result = align_1.getRowsOfButtons(generateCharArray('A', 'Z'), 2, 3, 2);
    t.deepEqual(result, [
        ['G', 'H'],
        ['I', 'J'],
        ['K', 'L']
    ]);
});
ava_1.default('getRowsOfButtons example with defaults', t => {
    const result = align_1.getRowsOfButtons(generateCharArray('A', 'E'));
    t.deepEqual(result, [
        ['A', 'B', 'C', 'D', 'E']
    ]);
});
ava_1.default('getButtonsAsRows less buttons than columns', t => {
    const result = align_1.getButtonsAsRows(generateCharArray('A', 'E'), 6);
    t.deepEqual(result, [
        ['A', 'B', 'C', 'D', 'E']
    ]);
});
ava_1.default('getButtonsAsRows buttons for three colums', t => {
    const result = align_1.getButtonsAsRows(generateCharArray('A', 'F'), 2);
    t.deepEqual(result, [
        ['A', 'B'],
        ['C', 'D'],
        ['E', 'F']
    ]);
});
ava_1.default('getButtonsAsRows buttons for three colums but last not full', t => {
    const result = align_1.getButtonsAsRows(generateCharArray('A', 'E'), 2);
    t.deepEqual(result, [
        ['A', 'B'],
        ['C', 'D'],
        ['E']
    ]);
});
ava_1.default('getButtonsAsRows default columns', t => {
    const result = align_1.getButtonsAsRows(generateCharArray('A', 'H'));
    t.deepEqual(result, [
        ['A', 'B', 'C', 'D', 'E', 'F'],
        ['G', 'H']
    ]);
});
ava_1.default('getButtonsAsRows without buttons', t => {
    const result = align_1.getButtonsAsRows([]);
    t.deepEqual(result, []);
});
ava_1.default('getButtonsOfPage default args', t => {
    const result = align_1.getButtonsOfPage(generateCharArray('A', 'E'));
    t.deepEqual(result, [
        'A', 'B', 'C', 'D', 'E'
    ]);
});
ava_1.default('getButtonsOfPage without buttons', t => {
    const result = align_1.getButtonsOfPage([]);
    t.deepEqual(result, []);
});
ava_1.default('getButtonsOfPage trim by maxRows', t => {
    const result = align_1.getButtonsOfPage(generateCharArray('A', 'Z'), 1, 5);
    t.deepEqual(result, [
        'A', 'B', 'C', 'D', 'E'
    ]);
});
ava_1.default('getButtonsOfPage second page', t => {
    const result = align_1.getButtonsOfPage(generateCharArray('A', 'Z'), 1, 3, 2);
    t.deepEqual(result, [
        'D', 'E', 'F'
    ]);
});
ava_1.default('getButtonsOfPage partial last page', t => {
    const result = align_1.getButtonsOfPage(generateCharArray('A', 'E'), 1, 3, 2);
    t.deepEqual(result, [
        'D', 'E'
    ]);
});
ava_1.default('getButtonsOfPage last possible page instead of wanted', t => {
    const result = align_1.getButtonsOfPage(generateCharArray('A', 'F'), 1, 3, 3);
    t.deepEqual(result, [
        'D', 'E', 'F'
    ]);
});
ava_1.default('maximumButtonsPerPage example', t => {
    t.is(align_1.maximumButtonsPerPage(2, 3), 6);
    t.is(align_1.maximumButtonsPerPage(4, 4), 16);
});
ava_1.default('maximumButtonsPerPage default', t => {
    t.is(align_1.maximumButtonsPerPage(), 60);
});
//# sourceMappingURL=align.test.js.map