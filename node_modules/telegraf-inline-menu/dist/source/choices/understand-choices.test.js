"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const understand_choices_1 = require("./understand-choices");
ava_1.default('getChoiceKeysFromChoices from array', t => {
    const choices = ['A', 'B', 1];
    const keys = understand_choices_1.getChoiceKeysFromChoices(choices);
    t.deepEqual(keys, ['A', 'B', '1']);
});
ava_1.default('getChoiceKeysFromChoices from record', t => {
    const choices = { A: 'Aaa', B: 'Bbb', 1: '111' };
    const keys = understand_choices_1.getChoiceKeysFromChoices(choices);
    // A Record is not ordered. Numbers are always before text keys
    t.deepEqual(keys, ['1', 'A', 'B']);
});
ava_1.default('getChoiceKeysFromChoices from map', t => {
    const choices = new Map();
    choices.set('A', 'Aaa');
    choices.set('B', 'Bbb');
    choices.set(1, '111');
    const keys = understand_choices_1.getChoiceKeysFromChoices(choices);
    t.deepEqual(keys, ['A', 'B', '1']);
});
ava_1.default('getChoiceTextByKey from array', t => {
    const choices = ['A', 'B'];
    const text = understand_choices_1.getChoiceTextByKey(choices, 'A');
    t.is(text, 'A');
});
ava_1.default('getChoiceTextByKey from record', t => {
    const choices = { A: 'Aaa', B: 'Bbb' };
    const text = understand_choices_1.getChoiceTextByKey(choices, 'A');
    t.is(text, 'Aaa');
});
ava_1.default('getChoiceTextByKey from map', t => {
    const choices = new Map();
    choices.set('A', 'Aaa');
    choices.set('B', 'Bbb');
    const text = understand_choices_1.getChoiceTextByKey(choices, 'A');
    t.is(text, 'Aaa');
});
ava_1.default('getChoiceTextByKey from record but undefined', t => {
    const choices = { A: 'Aaa', B: 'Bbb' };
    const text = understand_choices_1.getChoiceTextByKey(choices, 'C');
    t.is(text, 'C');
});
ava_1.default('getChoiceTextByKey from map but undefined', t => {
    const choices = new Map();
    choices.set('A', 'Aaa');
    choices.set('B', 'Bbb');
    const text = understand_choices_1.getChoiceTextByKey(choices, 'C');
    t.is(text, 'C');
});
ava_1.default('ensureCorrectChoiceKeys correct keys are not a problem', t => {
    const choiceKeys = ['a', 'A', 'a:A', 'aaaaaaaaaaa'];
    t.notThrows(() => {
        understand_choices_1.ensureCorrectChoiceKeys('', '/', choiceKeys);
    });
});
ava_1.default('ensureCorrectChoiceKeys slash throws', t => {
    const choiceKeys = ['a/a'];
    t.throws(() => {
        understand_choices_1.ensureCorrectChoiceKeys('prefix', '/path/', choiceKeys);
    }, { message: /can not contain '\/'.+prefix.+\/path\// });
});
//# sourceMappingURL=understand-choices.test.js.map