"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const buttons_1 = require("./buttons");
ava_1.default('empty choices no buttons', async (t) => {
    const func = buttons_1.generateChoicesButtons('pre', false, [], {});
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, []);
});
ava_1.default('single choice one button', async (t) => {
    const func = buttons_1.generateChoicesButtons('pre', false, ['a'], {});
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: 'a',
                relativePath: 'pre:a'
            }]]);
});
ava_1.default('single choice into submenu', async (t) => {
    const func = buttons_1.generateChoicesButtons('pre', true, ['a'], {});
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: 'a',
                relativePath: 'pre:a/'
            }]]);
});
ava_1.default('creates pagination buttons', async (t) => {
    const func = buttons_1.generateChoicesButtons('pre', false, ['a', 'b', 'c'], {
        columns: 1,
        maxRows: 1,
        setPage: () => {
            throw new Error('no need to call setPage on keyboard creation');
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [
        [{
                text: 'a',
                relativePath: 'pre:a'
            }],
        [{
                text: '1',
                relativePath: 'preP:1'
            }, {
                text: '▶️ 2',
                relativePath: 'preP:2'
            }, {
                text: '⏩ 3',
                relativePath: 'preP:3'
            }]
    ]);
});
ava_1.default('show keys of page 2', async (t) => {
    const func = buttons_1.generateChoicesButtons('pre', false, ['a', 'b', 'c'], {
        columns: 1,
        maxRows: 1,
        getCurrentPage: () => 2
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: 'b',
                relativePath: 'pre:b'
            }]]);
});
ava_1.default('choice function is run', async (t) => {
    t.plan(4);
    const choiceFunction = (context) => {
        t.pass();
        return [context];
    };
    const func = buttons_1.generateChoicesButtons('pre', false, choiceFunction, {});
    t.deepEqual(await func('a', '/'), [[{
                text: 'a',
                relativePath: 'pre:a'
            }]]);
    t.deepEqual(await func('b', '/'), [[{
                text: 'b',
                relativePath: 'pre:b'
            }]]);
});
ava_1.default('choice can have text by itself', async (t) => {
    const func = buttons_1.generateChoicesButtons('pre', false, { a: 'Aaa' }, {});
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: 'Aaa',
                relativePath: 'pre:a'
            }]]);
});
ava_1.default('choice buttonText is used', async (t) => {
    const func = buttons_1.generateChoicesButtons('pre', false, ['a'], {
        buttonText: () => 'Aaa'
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, [[{
                text: 'Aaa',
                relativePath: 'pre:a'
            }]]);
});
ava_1.default('hidden does not render any buttons', async (t) => {
    const choiceFunction = () => {
        throw new Error('hidden -> dont call choices');
    };
    const func = buttons_1.generateChoicesButtons('pre', false, choiceFunction, {
        hide: (context, path) => {
            t.is(context, undefined);
            t.is(path, '/');
            return true;
        }
    });
    const buttons = await func(undefined, '/');
    t.deepEqual(buttons, []);
});
//# sourceMappingURL=buttons.test.js.map