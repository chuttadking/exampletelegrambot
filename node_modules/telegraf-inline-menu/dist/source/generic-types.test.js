"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const generic_types_1 = require("./generic-types");
function filterNonNullableTypesafeEqual(t, actual, expected) {
    t.deepEqual(actual, expected);
}
ava_1.default('filterNonNullable', t => {
    const input = ['bla', undefined, 'blubb', null];
    const output = input.filter(generic_types_1.filterNonNullable());
    filterNonNullableTypesafeEqual(t, output, ['bla', 'blubb']);
});
ava_1.default('isRegExpExecArray true', t => {
    t.true(generic_types_1.isRegExpExecArray(/bla/.exec('bla')));
    t.true(generic_types_1.isRegExpExecArray(/b(la)/.exec('bla')));
});
ava_1.default('isRegExpExecArray null', t => {
    t.false(generic_types_1.isRegExpExecArray(null));
    t.false(generic_types_1.isRegExpExecArray(/bla/.exec('blubb')));
});
ava_1.default('isRegExpExecArray array without string entry', t => {
    t.false(generic_types_1.isRegExpExecArray([]));
    t.false(generic_types_1.isRegExpExecArray([42]));
});
ava_1.default('isRegExpExecArray normal string array', t => {
    t.false(generic_types_1.isRegExpExecArray(['bla']));
    t.false(generic_types_1.isRegExpExecArray(['bla', 'la']));
});
ava_1.default('isObject examples', t => {
    t.true(generic_types_1.isObject({}));
    t.true(generic_types_1.isObject(t));
    t.false(generic_types_1.isObject('bla'));
    t.false(generic_types_1.isObject(() => 'bla'));
    t.false(generic_types_1.isObject(5));
    t.false(generic_types_1.isObject(null));
    t.false(generic_types_1.isObject(true));
    t.false(generic_types_1.isObject(undefined));
});
ava_1.default('hasTruthyKey examples', t => {
    t.false(generic_types_1.hasTruthyKey(undefined, 'stuff'));
    t.false(generic_types_1.hasTruthyKey('undefined', 'stuff'));
    t.false(generic_types_1.hasTruthyKey([], 'stuff'));
    t.false(generic_types_1.hasTruthyKey({}, 'stuff'));
    t.false(generic_types_1.hasTruthyKey({ stuffy: 'bla' }, 'stuff'));
    t.true(generic_types_1.hasTruthyKey({ stuff: 'bla' }, 'stuff'));
    t.true(generic_types_1.hasTruthyKey({ stuff: true }, 'stuff'));
    t.false(generic_types_1.hasTruthyKey({ stuff: false }, 'stuff'));
    t.false(generic_types_1.hasTruthyKey({ stuff: undefined }, 'stuff'));
    t.false(generic_types_1.hasTruthyKey({ stuff: null }, 'stuff'));
});
//# sourceMappingURL=generic-types.test.js.map